Cryptography – a very brief introduction
Cryptography is the science of sending messages securely over unsecure networks. This means jumbling up the message in some way so that it unreadable, but such that the receiver can decrypt the message. This can be achieved by having a particular “key,” and an approach to change the characters, which both sender and receiver know about. A very simple approach would be a Caesar Cipher, with an only slighter less crackable (for a computer) approach being a Vigenere cipher. These are easy to program, as they just require a key, and then apply a simple function on the characters of the message based on the key. This simplicity makes them very easy to break through enumeration (trying all of the options), which a computer can do fractions of a second. These are both examples of symmetric cryptographic algorithms, meaning that the sender and receiver have the same key. There are more advanced (longer to enumerate) symmetric cryptographic algorithms, but these share a major problem: how does sender and receiver have the same key, without this data being compromised. The answer is to use an asymmetric cryptographic algorithm such as RSA. RSA is very clever! In essence, the receiver knows the key, but provides the sender another set of numbers derivable from the key. The sender then encrypts the numbers message based on this information but crucially this process is not easily reversed. In order to decrypt the message, the original key, from which the numbers provided to the sender were derived are needed. If intercepted, the message would take a very long time to decrypt as any method would require finding very large prime numbers, which – as any mathematician would know – is not (currently) a process that can be done by a clever algorithm. RSA is a more longwinded process; so I believe that modern encryption systems use an asymmetric algorithm like RSA in order to securely share a symmetric key, which can then be used for the rest of the data. 
Below is my application of a Caesar and Vignere cipher. Playing with these were very helful for getting a handle on arrays and accessing characters within strings. 
_____________________________________________________________________________________________________________
Caesar:
#include <**library for getstring()**.h>
#include <stdio.h>
#include <stdlib.h> //in order to include atoi
#include <string.h> //in order to include strlen
#include <ctype.h>

#define A_ASCII 65
#define a_ASCII 97

int main (int argc, string argv[])
{
    //ensures that one and only one argument is given
    if (argc !=2)
    {
        printf("Usage: /workspace/caesar <key>\n");
        return 1;
    }
    //ensures non negativity of key
    else if (atoi(argv[1]) < 0)
        printf("Key must be a non-negative integer.\n");
    else
    {   
        int key = atoi(argv[1]) %26;
        string plaintext = GetString();
        
        for (int i=0, n=strlen(plaintext); i<n; i++)
        {
            //checks each char in tern. If alphabetic then it transposes before printing, if not then it it just prints
            if (isalpha(plaintext[i]))
            {
                if (isupper(plaintext[i]))
                    printf("%c", (((plaintext[i]-A_ASCII)+key)%26)+A_ASCII);
                else 
                    printf("%c", (((plaintext[i]-a_ASCII)+key)%26)+a_ASCII);
            }
            else 
                printf("%c",plaintext[i]);
                
        }
        printf("\n");
        return 0;
    }
}
_____________________________________________________________________________________________________________
Vignere:
#include <**library for getstring()**.h>
#include <stdio.h>
#include <string.h> //in order to include strlen
#include <ctype.h>

#define A_ASCII 65
#define a_ASCII 97

int main (int argc, string argv[])
{
    //ensures that one and only one argument is given
    if (argc !=2)
    {
        printf("Usage: /workspace/vigenere <keyword>\n");
        return 1;
    }
    else
    {
        //Checks that the key is only alphabetic, if not then it exits
        for (int k = 0, m=strlen(argv[1]); k<m; k++)
        {
            if (!(isalpha(argv[1][k])))
            {
                printf("Keyword must only contain letters A-Z and a-z \n");
                return 1;
            }
        }
        //performs transposition on alphabetic characters, skipping others. After each use of a character of the key, it goes to the next character mod key length
        string key = argv[1];
        int keylength = strlen(key);
        string plaintext = GetString();
        int k_th = 0;
        for (int i = 0, n = strlen(plaintext); i<n; i++)
        {
            if (isalpha(plaintext[i]))
            {
                if (isupper(plaintext[i]))
                {
                    printf("%c", (((plaintext[i]-A_ASCII)+(toupper(key[k_th])-A_ASCII))%26)+A_ASCII);
                }
                else 
                {
                    printf("%c", (((plaintext[i]-a_ASCII)+(toupper(key[k_th])-A_ASCII))%26)+a_ASCII);
                }
                k_th = (k_th+1)%keylength; 
            }
            else
                printf("%c",plaintext[i]);
        }
        printf("\n");
        return 0;
    }
}



