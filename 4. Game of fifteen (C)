/**
 * fifteen.c

 * Implements Game of Fifteen (generalized to d x d).
 *
 * Usage: fifteen d
 *
 * whereby the board's dimensions are to be d x d,
 * where d must be in [DIM_MIN,DIM_MAX]
 *
 * Note that usleep is obsolete, but it offers more granularity than
 * sleep and is simpler to use than nanosleep; `man usleep` for more.
 */
 
#define _XOPEN_SOURCE 500

#include <**library**.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

// constants
#define DIM_MIN 3
#define DIM_MAX 9

// board
int board[DIM_MAX][DIM_MAX];


// dimensions
int d;

// defining d squared for use later (as it is commonly needed)
int d_sqr;

//position of the blank tile
int blank_ith;
int blank_jth;

//position of selected tile at each move
int tile_ith;
int tile_jth;

// prototypes
void clear(void);
void greet(void);
void init(void);
void draw(void);
bool move(int tile);
bool won(void);

int main(int argc, string argv[])
{
    // ensure proper usage
    if (argc != 2)
    {
        printf("Usage: fifteen d\n");
        return 1;
    }

    // ensure valid dimensions
    d = atoi(argv[1]);
    if (d < DIM_MIN || d > DIM_MAX)
    {
        printf("Board must be between %i x %i and %i x %i, inclusive.\n",
            DIM_MIN, DIM_MIN, DIM_MAX, DIM_MAX);
        return 2;
    }

    // open log
    FILE* file = fopen("log.txt", "w");
    if (file == NULL)
    {
        return 3;
    }

    // greet user with instructions
    greet();

    // initialize the board
    init();

    // accept moves until game is won
    while (true)
    {
        // clear the screen
        clear();

        // draw the current state of the board
        draw();

        // log the current state of the board (for testing)
        for (int i = 0; i < d; i++)
        {
            for (int j = 0; j < d; j++)
            {
                fprintf(file, "%i", board[i][j]);
                if (j < d - 1)
                {
                    fprintf(file, "|");
                }
            }
            fprintf(file, "\n");
        }
        fflush(file);

        // check for win
        if (won())
        {
            printf("ftw!\n");
            break;
        }

        // prompt for move
        printf("Tile to move: ");
        int tile = GetInt();
        
        // quit if user inputs 0 (for testing)
        if (tile == 0)
        {
            break;
        }

        // log move (for testing)
        fprintf(file, "%i\n", tile);
        fflush(file);

        // move if possible, else report illegality
        if (!move(tile))
        {
            printf("\nIllegal move.\n");
            usleep(500000);
        }

        // sleep thread for animation's sake
        usleep(500000);
    }
    
    // close log
    fclose(file);

    // success
    return 0;
}

/**
 * Clears screen using ANSI escape sequences.
 */
void clear(void)
{
    printf("\033[2J");
    printf("\033[%d;%dH", 0, 0);
}

/**
 * Greets player.
 */
void greet(void)
{
    clear();
    printf("WELCOME TO GAME OF FIFTEEN\n");
    usleep(2000000);
}

/**
 * Initializes the game's board with tiles numbered 1 through d*d - 1
 * (i.e., fills 2D array with values but does not actually print them). NB must swap final two for even d and not so for odd d 
 */
void init(void)
{
    d_sqr = d*d;
    // Assignes ordered values to places in the board array, making the final value 0  
    for (int i = 0; i<d; i++)
    {
        for (int j = 0; j<d; j++)
        {
            board[i][j] = d_sqr - 1 - (i*d) - j;
        }
    }
    //naming the position of the blank tile for use later
    blank_ith = d-1;
    blank_jth = d-1;
    //condition: if d is even we need to swap the final two numbered tiles
    if (d%2 == 0)
    {
        board[d-1][d-2] = 2;
        board[d-1][d-3] = 1;
    }
    return;
}

/**
 * Prints the board in its current state.
 */
void draw(void)
{
    //Going through each element in turn, print two character value and a space, unless the value is the blank space,
    //in which case print " _"
    for (int i = 0; i<d; i++)
    {
        for (int j = 0; j<d; j++)
        {
            if (board[i][j] !=0)
                printf("%2d ", board[i][j]);
            
            else
                printf(" _ ");
        }
        printf("\n\n");
    }
    printf("\n");
    return;
}

/**
 * If tile borders empty space, moves tile and returns true, else
 * returns false. 
 */
bool move(int tile)
{
    //firstly need to search for the tile's position to know where it is
    for (int i = 0; i<d; i++)
    {
        for (int j = 0; j<d; j++)
        {
            if (tile == board[i][j])
            {
               tile_ith = i;
               tile_jth = j;
               i = d;
               j = d;
            }
        }
    }
    //now the program needs to check if the move is legal. i.e. if the tile is adjacent to the blank tile, 
    //if it is legal it needs to swap the tile with the blank space
    if ((tile_ith == blank_ith - 1 && tile_jth == blank_jth) || (tile_ith == blank_ith + 1 && tile_jth == blank_jth) || (tile_ith == blank_ith && tile_jth == blank_jth - 1) || (tile_ith == blank_ith && tile_jth == blank_jth + 1)) 
    {
        board[tile_ith][tile_jth] = 0;
        board[blank_ith][blank_jth] = tile;
        blank_ith = tile_ith;
        blank_jth = tile_jth;
        return true; 
    }
    return false;
}

/**
 * Returns true if game is won (i.e. board is in winning configuration), 
 * else returns false.
 */
bool won(void)
{
    int counter = 1;
    for (int i = 0; i<d; i++)
    {
        for (int j = 0; j < d; j++)
        {
            //Condition check: Check whether the i,jth element is the same as the counter
            if (board[i][j] != counter)
                return false;
            else
                counter = (counter+1)%d_sqr;
        }
    }
    return true;
}
